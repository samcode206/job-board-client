{"ast":null,"code":"var _jsxFileName = \"/Users/sameem/Desktop/job-board-client/src/components/Account/subcomponents/useractions/newJob/ResponsiblityModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PreMadeRes from './preMadeJobRes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResponsibilityModal({\n  allRessponsibilities,\n  ackRes\n}) {\n  _s();\n\n  const [pmResps, setPmResps] = useState(allRessponsibilities);\n  const [preMadeMode, setPreMadeMode] = useState(false);\n  const [controllerModal, setControllerModal] = useState(false);\n  const [responsiblities, setResponsibilites] = useState([]);\n  const [customField, setCustomField] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button is-rounded is-link\",\n      onClick: () => setControllerModal(true),\n      children: \"Add Job Responsibilities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: controllerModal ? \"modal is-active\" : \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"modal-card-head\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"modal-card-title\",\n            children: \"Job Responsibilities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setControllerModal(false),\n            className: \"delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"modal-card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notification is-link is-light has-text-centered\",\n            children: [\"For your convenience checkout our \", /*#__PURE__*/_jsxDEV(\"u\", {\n              style: {\n                cursor: \"pointer\"\n              },\n              onClick: () => {\n                setControllerModal(false);\n                setPreMadeMode(true);\n              },\n              children: \"pre-made Templates\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"control\",\n                children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: \"textarea is-link has-fixed-size\",\n                  placeholder: \"Add Responsibility\",\n                  value: customField,\n                  onChange: e => setCustomField(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 36,\n                  columnNumber: 34\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field is-grouped is-grouped-centered\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"button is-link is-light\",\n                  onClick: () => {\n                    if (customField.length > 2 && !responsiblities.includes(customField)) {\n                      const newRes = [...responsiblities];\n                      newRes.push(customField);\n                      setResponsibilites(newRes);\n                      ackRes(newRes);\n                      setCustomField(\"\");\n                    }\n                  },\n                  children: \"Add One\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 42,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 16\n          }, this), responsiblities.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"box\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"has-text-centered\",\n                children: \"Job Responsibilities\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: responsiblities.map(res => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [res, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    id: res,\n                    onClick: e => {\n                      const newRes = [...responsiblities].filter(res => res !== e.target.id);\n                      setResponsibilites(newRes);\n                      ackRes(newRes);\n                      const preMadeResps = allRessponsibilities.map(({\n                        value\n                      }) => value);\n                      const id = e.target.id;\n\n                      if (preMadeResps.includes(id)) {\n                        console.log(\"called\");\n                        const newPm = [...pmResps];\n                        const i = pmResps.findIndex(({\n                          value\n                        }) => value === id);\n                        console.log(i);\n                        newPm[i] = {\n                          value: pmResps[i].value,\n                          selected: false\n                        };\n                        console.log(pmResps);\n                        setPmResps(newPm);\n                      }\n                    },\n                    className: \"far fa-times-circle is-clickable chc\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 70\n                  }, this), \" \"]\n                }, res, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 50\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 42\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n          className: \"modal-card-foot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"field is-grouped\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"control\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button is-link\",\n                onClick: () => {\n                  setControllerModal(!controllerModal);\n                },\n                children: \"Confirm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PreMadeRes, {\n      allRessponsibilities: allRessponsibilities,\n      preMadeResponsibilites: pmResps,\n      setpreMadeResponsibilites: setPmResps,\n      active: preMadeMode,\n      goBack: setControllerModal,\n      setActive: setPreMadeMode,\n      getResps: resps => {\n        const formattedResps = resps.filter(({\n          selected\n        }) => selected).map(({\n          value\n        }) => value);\n        const newResps = [...responsiblities];\n        formattedResps.forEach(resp => {\n          if (!newResps.includes(resp)) {\n            newResps.push(resp);\n          }\n        });\n        const preMadeResps = allRessponsibilities.map(({\n          value\n        }) => value);\n        setResponsibilites(newResps.filter(resp => {\n          if (preMadeResps.includes(resp) && !formattedResps.includes(resp)) {} else {\n            return resp;\n          }\n\n          ;\n        }));\n        ackRes(newResps.filter(resp => {\n          if (preMadeResps.includes(resp) && !formattedResps.includes(resp)) {} else {\n            return resp;\n          }\n\n          ;\n        }));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 12\n  }, this);\n}\n\n_s(ResponsibilityModal, \"qt6xr6QW2S3grW6I+67D7gHLYIk=\");\n\n_c = ResponsibilityModal;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResponsibilityModal\");","map":{"version":3,"sources":["/Users/sameem/Desktop/job-board-client/src/components/Account/subcomponents/useractions/newJob/ResponsiblityModal.js"],"names":["React","useState","PreMadeRes","ResponsibilityModal","allRessponsibilities","ackRes","pmResps","setPmResps","preMadeMode","setPreMadeMode","controllerModal","setControllerModal","responsiblities","setResponsibilites","customField","setCustomField","cursor","e","target","value","length","includes","newRes","push","map","res","filter","id","preMadeResps","console","log","newPm","i","findIndex","selected","resps","formattedResps","newResps","forEach","resp"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PreMadeRes from './preMadeJobRes'; \n\nexport default function ResponsibilityModal({allRessponsibilities ,ackRes}){\n    const [pmResps, setPmResps] = useState(allRessponsibilities);\n    const [preMadeMode, setPreMadeMode] = useState(false);\n    const [controllerModal, setControllerModal] = useState(false); \n    const [responsiblities, setResponsibilites] = useState([]);\n\n    const [customField, setCustomField] = useState(\"\"); \n    \n    return <div>\n        <button className=\"button is-rounded is-link\" onClick={()=>setControllerModal(true)}>Add Job Responsibilities</button>\n        <div className={controllerModal ? \"modal is-active\" : \"modal\"}>\n        <div className=\"modal-background\"></div>\n        <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n                <p className=\"modal-card-title\">Job Responsibilities</p>\n                <button onClick={()=>setControllerModal(false)} className=\"delete\"></button>\n            </header>\n\n           <section className=\"modal-card-body\"> \n\n               <div className=\"notification is-link is-light has-text-centered\"> \n               For your convenience checkout our <u style={{cursor:\"pointer\"}} \n                onClick={()=>{\n                    setControllerModal(false); \n                    setPreMadeMode(true);\n                }}\n               >pre-made Templates</u> \n               </div>\n\n               <div className=\"box\">\n                    <div className=\"field\">\n                            <div className=\"control\">\n                                 <textarea className=\"textarea is-link has-fixed-size\" placeholder=\"Add Responsibility\" \n                                 value={customField} onChange={(e)=> setCustomField(e.target.value)}/>\n                             </div>\n                    </div>\n                    <div className=\"field is-grouped is-grouped-centered\">\n                            <div>\n                                <button className=\"button is-link is-light\" onClick={()=>{\n                                    if (customField.length > 2 && !responsiblities.includes(customField)) {\n                                        const newRes = [...responsiblities];\n                                        newRes.push(customField);\n                                        setResponsibilites(newRes);\n                                        ackRes(newRes);\n                                        setCustomField(\"\");\n                                    }\n                                }}>Add One</button>\n                            </div>\n                    </div>\n               </div>\n\n               {responsiblities.length ? <div className=\"box\">\n                <div className=\"content\">\n                    <h5 className=\"has-text-centered\">Job Responsibilities</h5>\n                <ul>\n                  {\n                      responsiblities.map(res => <li key={res}>{res} <i id={res} onClick={(e)=>{\n                        const newRes = [...responsiblities].filter(res => res !== e.target.id);\n                        setResponsibilites(newRes);\n                        ackRes(newRes);\n                        const preMadeResps = allRessponsibilities.map(({value})=> value);\n                        const id = e.target.id; \n                        if (preMadeResps.includes(id)){\n                            console.log(\"called\")\n                            const newPm = [...pmResps];\n                            const i = pmResps.findIndex(({value})=> value === id);\n                            console.log(i);\n                            newPm[i] = {value: pmResps[i].value, selected: false}\n                            console.log(pmResps);\n                            setPmResps(newPm);\n                        }            \n            \n                      }} className=\"far fa-times-circle is-clickable chc\" ></i> </li>)\n                  }\n                </ul>\n                </div>\n               </div> : null}\n            </section>\n            \n            <footer className=\"modal-card-foot\">\n                <div className=\"field is-grouped\">\n                \n                  <div className=\"control\">\n                  <button className=\"button is-link\" onClick={()=>{setControllerModal(!controllerModal)}}>Confirm</button>\n                  </div>\n                </div>\n            </footer>   \n               \n        </div>\n\n        </div>\n\n          <PreMadeRes \n           allRessponsibilities={allRessponsibilities} \n           preMadeResponsibilites={pmResps}\n           setpreMadeResponsibilites={setPmResps}\n           active={preMadeMode} goBack={setControllerModal} \n           setActive={setPreMadeMode} getResps={(resps)=>{\n            const formattedResps = resps.filter(({selected})=> selected).map(({value})=> value);\n            const newResps = [...responsiblities];\n            \n            formattedResps.forEach((resp)=> {\n                if (!newResps.includes(resp)){\n                    newResps.push(resp);\n                }\n            });\n            const preMadeResps = allRessponsibilities.map(({value})=> value);\n            setResponsibilites(newResps.filter((resp)=>{\n                if (preMadeResps.includes(resp) && !formattedResps.includes(resp)){\n                } else {\n                    return resp\n                };\n           \n            }));\n            ackRes(newResps.filter((resp)=>{\n                if (preMadeResps.includes(resp) && !formattedResps.includes(resp)){\n                } else {\n                    return resp\n                };\n           \n            }));\n           }}/>\n    </div>;\n}; \n\n\n"]},"metadata":{},"sourceType":"module"}